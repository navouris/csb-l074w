{"version":3,"sources":["components/CountryContext.jsx","components/ShowCountry.jsx","components/FetchCountry.jsx","components/SelectCode.jsx","components/App.jsx","index.js"],"names":["CountryContext","createContext","CountryProvider","children","useState","country","setCountry","data","setData","Provider","value","changeCountry","newCode","updateData","newCountry","ShowCountry","useContext","name","code","capital","style","fontSize","emoji","FetchCountry","useQuery","variables","countryCode","loading","error","console","log","SelectCode","setNewCountry","type","onChange","e","target","toUpperCase","placeholder","onKeyDown","keyCode","client","GraphQLClient","url","App","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"qMAEaA,EAAiBC,0BAEf,SAASC,EAAT,GAAuC,IAAZC,EAAW,EAAXA,SAAW,EACrBC,mBAAS,IADY,mBAC5CC,EAD4C,KACnCC,EADmC,OAE3BF,mBAAS,IAFkB,mBAE5CG,EAF4C,KAEtCC,EAFsC,KAYnD,OACE,cAACR,EAAeS,SAAhB,CAAyBC,MAAU,CAACL,UAASM,cAT/C,SAAuBC,GACrBN,EAAWM,IAQiDL,OAAMM,WALpE,SAAoBC,GAClBN,EAAQM,KAIR,SACMX,ICfK,SAASY,IACtB,IAAML,EAAQM,qBAAWhB,GAEzB,OAAIU,EAAML,QAEN,gCACE,uDAAmBK,EAAMH,KAAKU,KAA9B,aAAuCP,EAAMH,KAAKW,KAAlD,QACA,oCAAO,YAAcR,EAAMH,KAAKY,WAChC,sBAAKC,MAAO,CAAEC,SAAU,QAAxB,cAAoCX,EAAMH,KAAKe,MAA/C,UAIG,2DCAI,SAASC,IACtB,IAAMb,EAAQM,qBAAWhB,GADY,EAGFwB,YAbnB,+HAa0C,CACtDC,UAAW,CACTC,YAAahB,EAAML,WAFfsB,EAH2B,EAG3BA,QAASC,EAHkB,EAGlBA,MAAOrB,EAHW,EAGXA,KAMxB,OAAIoB,EAAiB,gDACjBC,IACFC,QAAQC,IAAIF,GACZlB,EAAMG,WAAW,KACfN,GAAMG,EAAMG,WAAWN,EAAKF,SAE9BK,EAAMH,KAEN,8BACE,cAACQ,EAAD,MAIM,4DClCC,SAASgB,IACtB,IAAMrB,EAAQM,qBAAWhB,GADU,EAECI,mBAAS,IAFV,mBAE5BU,EAF4B,KAEhBkB,EAFgB,KAenC,OACE,8BACE,uBAAOC,KAAK,OACZC,SAdJ,SAAuBC,GACrBH,EAAcG,EAAEC,OAAO1B,MAAM2B,gBAc3BC,YAAc,0BACdC,UAZJ,SAAgBJ,GACI,KAAdA,EAAEK,UACJ9B,EAAMC,cAAcG,GACpBkB,EAAc,MAUdtB,MAASI,MCff,IAAM2B,EAAS,IAAIC,IAAc,CAC/BC,IAAK,wCAGQ,SAASC,IACtB,OACE,cAAC,IAAcnC,SAAf,CAAwBC,MAAO+B,EAA/B,SACA,cAACvC,EAAD,UACM,sBAAK2C,UAAY,MAAjB,UACE,cAACd,EAAD,IACA,cAACR,EAAD,WCfZ,IAAMuB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACL,cAACN,EAAD,IACFE,K","file":"static/js/main.4cb04544.chunk.js","sourcesContent":["import React, {useState, createContext} from \"react\";\n\nexport const CountryContext = createContext();\n\nexport default function CountryProvider( {children}) {\n  const [country, setCountry] = useState(\"\"); // country code\n  const [data, setData] = useState({}); // country data\n  \n  function changeCountry(newCode){\n    setCountry(newCode);\n  }\n\n  function updateData(newCountry){\n    setData(newCountry)\n  }\n\n  return (\n    <CountryContext.Provider value = { {country, changeCountry, data, updateData} } >\n        { children }\n    </CountryContext.Provider>\n  )\n}","import React, { useContext } from \"react\";\nimport { CountryContext } from \"./CountryContext\";\n\nexport default function ShowCountry() {\n  const value = useContext(CountryContext);\n\n  if (value.country) {\n    return (\n      <div>\n        <div> {`COUNTRY: ${value.data.name} (${value.data.code})`}</div>\n        <div> {\"CAPITAL: \" + value.data.capital}</div>\n        <div style={{ fontSize: \"8rem\" }}> {value.data.emoji} </div>\n      </div>\n    );\n  } else {\n    return <div> no valid code selected </div>;\n  }\n}\n","import React, {useContext } from \"react\";\nimport {CountryContext} from \"./CountryContext\"\nimport { useQuery } from 'graphql-hooks'\nimport ShowCountry from \"./ShowCountry\"\n\nconst COUNTRY_DATA = `\nquery CountryData ($countryCode: ID!) {\n\tcountry(code:$countryCode){\n    name\n    capital\n    emoji\n    code\n  }\n}`\n\nexport default function FetchCountry() {\n  const value = useContext(CountryContext);\n\n    const { loading, error, data } = useQuery(COUNTRY_DATA, {\n      variables: {\n        countryCode: value.country\n      }\n    })\n  \n    if (loading) return (<div> Loading... </div> )\n    if (error) {\n      console.log(error)\n      value.updateData({})}\n    if (data) value.updateData(data.country);\n\n  if (value.data) {\n    return (\n      <div>\n        <ShowCountry />\n      </div>\n    )}\n  else {\n      return (<div> no valid code selected </div>)}\n  }","import React, {useContext, useState} from \"react\";\nimport {CountryContext} from \"./CountryContext\"\n\nexport default function SelectCode() {\n  const value = useContext(CountryContext);\n  const [newCountry, setNewCountry] = useState(\"\")\n\n  function changeHandler(e) {\n    setNewCountry(e.target.value.toUpperCase());\n  }\n\n  function submit(e){\n    if (e.keyCode === 13) {\n      value.changeCountry(newCountry)\n      setNewCountry(\"\")\n    }\n  }\n\n  return (\n    <div>\n      <input type=\"text\"  \n      onChange = {changeHandler}\n      placeholder = \"country 2 digit code...\" \n      onKeyDown = {submit}\n      value = {newCountry}/>\n    </div>\n  )\n}","import \"../styles.css\";\nimport React from \"react\";\nimport { GraphQLClient, ClientContext } from 'graphql-hooks'\n\nimport FetchCountry from \"./FetchCountry\"\nimport SelectCode from \"./SelectCode\"\nimport CountryProvider from \"./CountryContext\"\n\n\nconst client = new GraphQLClient({\n  url: 'https://countries.trevorblades.com/'\n})\n\nexport default function App() {\n  return (\n    <ClientContext.Provider value={client}>\n    <CountryProvider>\n          <div className = \"App\">\n            <SelectCode />\n            <FetchCountry />\n          </div>\n    </CountryProvider>\n    </ClientContext.Provider>\n  )\n}\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n  rootElement\n);\n"],"sourceRoot":""}